Execution Stack: [int v ; v=2 ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

Execution Stack: [int v, v=2 ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

Execution Stack: [v=2 ; print(v)]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

Execution Stack: [v=2, print(v)]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

Execution Stack: [print(v)]
Symbol Table: {v=2}
Output: []
FileTable: {}
Heap: {}

Execution Stack: []
Symbol Table: {v=2}
Output: [2]
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [Ref(int) v ; v= new (20) ; Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [Ref(int) v, v= new (20) ; Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [Ref(int) v, v= new (20) ; Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [v= new (20) ; Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [v= new (20) ; Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [v= new (20), Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [v= new (20), Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(0, int)}
Output: []
FileTable: {}
Heap: {}

ID: 8
Execution Stack: [Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [Ref(Ref(int)) a ; a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [Ref(Ref(int)) a, a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [Ref(Ref(int)) a, a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {a=(0, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [a= new (v) ; v= new (30) ; print(read(read(a)))]
Symbol Table: {a=(0, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [a= new (v), v= new (30) ; print(read(read(a)))]
Symbol Table: {a=(0, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [a= new (v), v= new (30) ; print(read(read(a)))]
Symbol Table: {a=(0, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20}

ID: 8
Execution Stack: [v= new (30) ; print(read(read(a)))]
Symbol Table: {a=(2, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20, 2=(1, int)}

ID: 8
Execution Stack: [v= new (30) ; print(read(read(a)))]
Symbol Table: {a=(2, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20, 2=(1, int)}

ID: 8
Execution Stack: [v= new (30), print(read(read(a)))]
Symbol Table: {a=(2, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20, 2=(1, int)}

ID: 8
Execution Stack: [v= new (30), print(read(read(a)))]
Symbol Table: {a=(2, Ref(int)), v=(1, int)}
Output: []
FileTable: {}
Heap: {1=20, 2=(1, int)}

ID: 8
Execution Stack: [print(read(read(a)))]
Symbol Table: {a=(2, Ref(int)), v=(3, int)}
Output: []
FileTable: {}
Heap: {1=20, 2=(1, int), 3=30}

ID: 8
Execution Stack: [print(read(read(a)))]
Symbol Table: {a=(2, Ref(int)), v=(3, int)}
Output: []
FileTable: {}
Heap: {1=20, 2=(1, int), 3=30}

ID: 8
Execution Stack: []
Symbol Table: {a=(2, Ref(int)), v=(3, int)}
Output: [20]
FileTable: {}
Heap: {1=20, 2=(1, int), 3=30}

ID: 11
Execution Stack: [int v ; Ref(int) a ; v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [int v, Ref(int) a ; v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [int v, Ref(int) a ; v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [Ref(int) a ; v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [Ref(int) a ; v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [Ref(int) a, v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [Ref(int) a, v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [v=10 ; a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [v=10, a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [v=10, a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=0}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=10}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [a= new (22) ; fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=10}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [a= new (22), fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=10}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [a= new (22), fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(0, int), v=10}
Output: []
FileTable: {}
Heap: {}

ID: 11
Execution Stack: [fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [fork(write(a,30) ; v=32 ; print(v) ; print(read(a))) ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [fork(write(a,30) ; v=32 ; print(v) ; print(read(a))), print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [fork(write(a,30) ; v=32 ; print(v) ; print(read(a))), print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 12
Execution Stack: [write(a,30) ; v=32 ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 12
Execution Stack: [write(a,30) ; v=32 ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [print(v), print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 12
Execution Stack: [write(a,30), v=32 ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [print(v), print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 12
Execution Stack: [write(a,30), v=32 ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: []
FileTable: {}
Heap: {1=22}

ID: 11
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: [10]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [v=32 ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: [10]
FileTable: {}
Heap: {1=30}

ID: 11
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: [10]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [v=32 ; print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: [10]
FileTable: {}
Heap: {1=30}

ID: 11
Execution Stack: []
Symbol Table: {a=(1, int), v=10}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [v=32, print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [v=32, print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=10}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=32}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [print(v) ; print(read(a))]
Symbol Table: {a=(1, int), v=32}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [print(v), print(read(a))]
Symbol Table: {a=(1, int), v=32}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [print(v), print(read(a))]
Symbol Table: {a=(1, int), v=32}
Output: [10, 30]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=32}
Output: [10, 30, 32]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: [print(read(a))]
Symbol Table: {a=(1, int), v=32}
Output: [10, 30, 32]
FileTable: {}
Heap: {1=30}

ID: 12
Execution Stack: []
Symbol Table: {a=(1, int), v=32}
Output: [10, 30, 32, 30]
FileTable: {}
Heap: {1=30}

ID: 10
Execution Stack: [int v ; v=4 ; while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [int v, v=4 ; while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [int v, v=4 ; while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=4 ; while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=4 ; while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=4, while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=4, while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {v=0}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1} ; print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: []
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=4}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=3}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=2}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v) ; v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v), v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2, 1]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [v=v - 1, while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=1}
Output: [4, 3, 2, 1]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=0}
Output: [4, 3, 2, 1]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [while(v > 0) {print(v) ; v=v - 1}, print(v)]
Symbol Table: {v=0}
Output: [4, 3, 2, 1]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v)]
Symbol Table: {v=0}
Output: [4, 3, 2, 1]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: [print(v)]
Symbol Table: {v=0}
Output: [4, 3, 2, 1]
FileTable: {}
Heap: {}

ID: 10
Execution Stack: []
Symbol Table: {v=0}
Output: [4, 3, 2, 1, 0]
FileTable: {}
Heap: {}

